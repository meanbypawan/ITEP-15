Database :-
 What is the database ? What are differences between database and file ?
 What is RDBMS? How will you differentiate between DBMS and RDBMS ?
 What are the features of RDBMS ?
 What is MySQL ?
 How to create database in MySQL ?
 What are datatypes supported by MySQL ?
 What are key ?
 What are Constraint ?
 SQL Categories :-
  DDL,DML,TCL,DRL,DCL
------------------------------------------------------------------------------------ 
Database Listing :-
  show databases;

Creating Database :-
  create database empdb;
Drop Database :-
  drop database empdb;

Using database 
  use empdb;
-----------------------------------------------------------------------------------
Datatypes :- int, tinyint, char, varchar, text, float, date, blob, clob
char v/s varchar v/s text ---> String
Creating table :-
  create table employee(
    id int,
    name varchar(100),
    mobile int(10),
    age int(3),
    salary int(10)
  )  
Listing Table
 show tables            
drop table table_name;

create table employee(
  id int primary key auto_increment,
  name varchar(100) not null,
  salary int(10) default 10000,
  mobile varchar(10) unique key,
  age int(3) check(age>17)
  )

insert into employee(name,salary,mobile,age) values('Rahul',90000,'9009111222',20);
insert into employee(name,mobile,age) values('Cheeku','9009111999',29);
insert into employee(name,salary,mobile,age)
values('Ankita',150000,'9009111444',28),
('Nikita',1450000,'9009111555',26),
('Shree',190000,'9009111666',23),
('Ishu',78000,'9009111777',29),
('Dishu',90000,'9009111888',30)

select id,name,salary from employee;

Filter :- where clause

select id,name,salary from employee where salary > 80000
select id,name,salary from employee where salary >=80000 and salary <=100000
select id,name,salary from employee where salary between 80000 and 100000
select id,name,salary from employee where age = 28 or age = 30
select id,name,salary from employee where age in (28,30)
select id,name,salary from employee where (salary >=80000 and salary <=10000) or age = 30;
select id,name,age,salary from employee where salary is null; [is not null]
Wild card character :-  %, _
% :- zero or any number of occurance
_ :- 
select id,name,salary from employee where name like '%a';
select id,name,salary from employee where name like '%k%';
select id,name,salary from employee where name like '%s__'
--------------------------------------------------------------------------------
Aggregate Function
  sum(), count(), max(), min(), avg(),...

 Fetch the employee details whose salary is maximum
 select * from employee where salary = max(salary)

 
 select id,name,salary from employee
   where salary = ( select max(salary) from employee)

 order by :- asc desc :-- sorting
 select * from employee order by salary desc;
 select * from employee order salary desc limit 3
 select * from employee order by salary desc limit 3,2
 
 select id,name,salary from employee where salary = (
  select max(salary) from employee where salary < ( select max(salary) from employee))
 
  select id,name,salary from employee where salary = (
  select max(salary) from employee where salary < ( select max(salary) from employee
   where salary < ( select max(salary) from employee)))
 
  alter table employee add(skill varchar(100))
  
  update employee set skill = 'ReactJs' where id in (4,5,6)
 
  select count(*),skill from employee group by skill having age >=25; 
  
  select skill,sum(salary) from employee where skill = 'Java' group by skill
--------------------------------------------------------------------------------------------------------
RelationShip/Mapping-Cardinalities/Association
 1. One To One :- If record of Table-A is only associated with exactly one record of Table-B.
    e.g. In E-commerce Scenario , User has One Cart.
 2. One To Many :- If record of Table-A is associated with multiple record of Table-B.
       e.g Category hasMany Product
 3. Many To Many :- If record of Table-A is associated with multiple record of Table-B and
    record of Table-B is also associated with mutliple record of Table-A.
    Note:- Need Third(Supporting Table) To implement many to many
    e.g. :-  Cart has Many Product
           Product belongsToMany Cart
 create table department(
   id int primary key auto_increment,
   department_name varchar(100));
   
   insert into department(department_name) values('HR'),('Developement'),('Admin'),('Operation')  
   
   alter table employee add(
     department_id int,
     foreign key(department_id) references department(id));
-----------------------------------------------------------------------------
   create table city(
     id int primary key auto_increment,
     city_name varchar(100));
   insert into city(city_name) values('Indore'),('Pune'),('Mumbai')
     
   employee(department_id)   deparment(id)   
   employee(city_id)         city(id)
   
   select employee.id,employee.name,department.department_name
   from employee inner join department on employee.department_id = department.id
      
   alter table employee add(
     city_id int,
     foreign key (city_id) references city(id));
   
   update employee set city_id = 1 where id in(1,3,4)
   update employee set city_id=2 where id in(5,6,7,8,9)
   update employee set city_id = 3 where id not in(1,3,4,5,6,7,8,9)  

   select employee.id,employee.name,department.department_name,city.city_name
   from employee inner join department on employee.department_id = department.id
   inner join city on employee.city_id = city.id

   select employee.id,employee.name,department.department_name
   from employee left outer join department on employee.department_id = department.id
    
   
   select employee.id,employee.name,department.department_name
   from employee right outer join department on employee.department_id = department.id
    

   select * from employee,department.
   
   create table user(
     id int primary key,
     name varchar(100),
     friend_id int);

   insert into user(id,name,friend_id)
   values(100,'Shivam',104),
   (101,'Rahul',103),
   (102,'Rahil',100),
   (103,'Lili',102),
   (104,'Divya',null)

   select u1.name as name,u2.name as friend_name
   from user as u2 inner join user as u1 on u1.id = u2.friend_id
   
   ----------------------------------------------------------------------------------------
   update employee set salary=89000, mobile='9009343434' where id = 10
   
   delete from employee where id = 11
              
             
   create view EMPLOYEE_DETAILS as select employee.id,employee.name,department.department_name,city.city_name
   from employee inner join department on employee.department_id = department.id
   inner join city on employee.city_id = city.id 

   









            
            
            
            
            
            
            
            
            
            
